# Log4j 1.2.17 版本的属性配置文件来设置核心组件对象，
# 配置包括 指定输出日志 Level，定义日志输出目的地Appender,以及知名日志信息格式

### set log levels 设置根logger ， 设置全局输出的日志级别为ALL;对于每个appdender 可以自定义输出级别；（如：log4j.appender.D.Threshold）
#  同时定义了三个 appender：stdout, D, E ###
log4j.rootLogger = ALL , stdout, D, E

### 输出到控制台 ###
# 将stdout 这个appender 的目的地为控制台
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
# true 表示所有的日志信息立即输出，false 表示不立即输出。
log4j.appender.stdout.ImmediateFlush = true
# 表示输出到控制台 是通过哪种形式输出：System.err（输出为红色字体） 和System.out(默认)
log4j.appender.stdout.Target = System.out
# 设置当前appender 为stdout的日志输出级别最低为TRACE。
log4j.appender.D.Threshold = debug  
# 将stdout 这个 appender 日志信息格式定义如下。
# org.apache.log4j.HTMLLayout 输出的日志信息是一个完整的html 文档。不用设置ConversionPattern 属性。
# 但是如果设置为 PatternLayout那么就需要设置ConversionPattern属性，设置具体日志信息内容以及格式。
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-d{yyyy-MM-dd HH:mm:ss}]-[ %t:%r ]-[ %p ]-%m%n

### 设置这个appender 为每日生成的日志文件(定期回滚日志文件,每天生产一个新的日志文件)；
# 日志记录器级别为：ERROR。错误输出到日志文件 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
##  错误日志文件,在项目根目录下
log4j.appender.E.File = logs/error.log 
## 日志附加到文件末尾
log4j.appender.E.Append = true
# 每天产生一个日志文件
log4j.appender.E.datePattern='.'yyyy-MM-dd
 ##  该appender 只输出ERROR级别（优先级）以上的日志 ##
log4j.appender.E.Threshold = ERROR 
# 设置该appender 格式目的地的日志信息使用的样式。
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [ %t:%r ] - [ %p ] - %m%n
log4j.appender.E.Encoding=utf-8
 

### 正常输出到日志文件，定时产生新的日志文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
## 正常日志文件 ,文件夹log在项目根目录下。
log4j.appender.D.File = logs/log.log 
 ##  该appender 只输出ERROR级别（优先级）以上的日志 ##
log4j.appender.D.Threshold = INFO 
# 每分钟产生一个一个日志文件。加入现在有了一个log.log 的日志文件，下一分钟将产生log.log.2017-11-21-11 形式的日志文件
log4j.appender.D.datePattern='.'yyyy-MM-dd-HH
# true （默认）表示后来的信息附加到文件末尾，false 表示新增的信息将覆盖文件原有的信息
log4j.appender.D.Append = true
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %5p ]  %m%n
log4j.appender.D.Encoding=utf-8
 

## Mybatis 配置
log4j.logger.java.sql.Statement = debug    
log4j.logger.java.sql.PreparedStatement = debug    
log4j.logger.java.sql.ResultSet =debug   



## 设置项目自己Logger
